files:
    "/etc/cron.d/install_aws":
        mode: "000644"
        owner: root
        group: root
        content: |
            * * * * * ec2-user gem install aws-sdk-v1
        encoding: plain

    "/etc/cron.d/check_for_aws":
        mode: "000644"
        owner: root
        group: root
        content: |
            * * * * * root /var/app/check-for-aws-sdk.sh
        encoding: plain

    "/var/app/check-for-aws-sdk.sh":
        mode: "000644"
        owner: root
        group: root
        content: |
            count=`runuser -l ec2-user -c 'gem list'|grep aws-sdk|wc -l`

            if [ $count -ne 0 ]
            then
                rm /etc/cron.d/install_aws
                rm /var/app/check-for-aws-sdk.sh
                rm /etc/cron.d/check_for_aws

                echo "found"
            else
                echo "not found"
            fi
        encoding: plain

    "/etc/cron.d/check_leader":
        mode: "000644"
        owner: root
        group: root
        content: |
            * * * * * ec2-user ruby /var/app/leader-manager.rb
        encoding: plain

    "/var/app/leader-manager.rb":
        mode: "000777"
        owner: ec2-user
        group: ec2-user
        content: |
            #!/usr/bin/ruby
            # thanks to https://github.com/dignoe/whenever-elasticbeanstalk/blob/master/bin/create_cron_leader

            require           'optparse'
            require           'fileutils'
            require           'rubygems'
            gem               'aws-sdk-v1'
            require           'aws-sdk-v1'
            require           'erb'

            def get_environment_name(ec2, instance_id)
                env_name = ec2.instances[instance_id].tags["elasticbeanstalk:environment-name"]
                File.open(File.join('/var/app/support','env_name'), 'w') {|f| f.write(env_name) }
                return env_name
            end

            def get_leader_count(ec2, environment_name)
                leader_instances = ec2.instances.to_a.inject([]) do |m, i|
                    m << i.id if i.tags["elasticbeanstalk:environment-name"] == environment_name &&
                        i.status == :running &&
                        i.tags["leader"] == "true"
                    m
                end

                return leader_instances.count
            end

            def get_instance_id
                if id = `/opt/aws/bin/ec2-metadata -i | awk '{print $2}'`.strip
                    File.open(File.join('/var/app/support','instance_id'), 'w') {|f| f.write(id) }
                    return id
                end
            end

            def get_region
                availability_zone = `/opt/aws/bin/ec2-metadata -z | awk '{print $2}'`.strip
                return availability_zone.slice(0..availability_zone.length-2)
            end

            def set_leader (ec2, instance_id, is_leader)
                ec2.instances[instance_id].tags["leader"] = (is_leader ? "true" : "false")

                if is_leader
                    FileUtils.touch('/var/app/leader-manager-is-leader')
                else
                    FileUtils.rm('/var/app/leader-manager-is-leader')
                end if

                puts (is_leader ? "Added" : "Removed") + " leader"
            end

            instance_id      = get_instance_id()
            region              = get_region()

            AWS.config({:credential_provider => AWS::Core::CredentialProviders::EC2Provider.new,:region => region})
            ec2 = AWS::EC2.new

            environment_name = get_environment_name(ec2, instance_id)

            leader_instances = get_leader_count(ec2, environment_name)

            if leader_instances < 1
                set_leader(ec2, instance_id, true)
            elsif leader_instances > 1
                set_leader(ec2, instance_id, false)
            else
                puts "Nothing changed."
            end
        encoding: plain

container_commands:
    05_clear_post_dir:
        command: "rm -rf /opt/elasticbeanstalk/hooks/appdeploy/post/*"
        ignoreErrors: true
    10_create_post_dir:
        command: "mkdir /opt/elasticbeanstalk/hooks/appdeploy/post"
        ignoreErrors: true
    15_clear_cron_backup:
        command: rm -f /etc/cron.d/*.bak
        ignoreErrors: true
    20_fix_permissions:
        command: chown -R ec2-user /var/app/support
        ignoreErrors: true

commands:
    01_install_patch:
        command: yum -y install patch

    02_install_aws_sdk:
        command: gem install aws-sdk-v1